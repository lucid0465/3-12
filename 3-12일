{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "4JTxsWF-5sXG"
   },
   "source": [
    "\n",
    "# [KDT] ch5 Linear Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 단일회귀 / 다중회귀 / 특성공학\n",
    " - 데이터셋: 직장인 연봉 정보 / 보스톤집값 / 공유자전거 플랫폼 / 다이아몬드 \n",
    " - 주요 라이브러리: statsmodels ols / sklearn linear_model / sklearn train_test_split / \n",
    " - 알파 퀴즈(1개) / 파이 퀴즈(1개) / 시그마 퀴즈(2개) / 오메가 퀴즈(과제 1개) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'c:\\\\OneDrive\\\\문서\\\\Office\\\\DS 2022\\\\DS강의(onedrive)\\\\강의\\\\KDT\\\\2차_230227\\\\실습'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "executionInfo": {
     "elapsed": 299,
     "status": "ok",
     "timestamp": 1668725561526,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "Dtoe4P7Hwi_G"
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "executionInfo": {
     "elapsed": 1006,
     "status": "ok",
     "timestamp": 1668725562530,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "2P_tOya1wwd_"
   },
   "outputs": [],
   "source": [
    "# 파일 로딩 \n",
    "df_hk = pd.read_csv('.\\\\data\\\\hk_221206.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "executionInfo": {
     "elapsed": 5,
     "status": "ok",
     "timestamp": 1668725562530,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "jxkAxUHlw2xM",
    "outputId": "9a2881a6-5156-4ab0-b65a-7088512c3be6"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>jumin7</th>\n",
       "      <th>gender</th>\n",
       "      <th>height</th>\n",
       "      <th>age</th>\n",
       "      <th>blood_type</th>\n",
       "      <th>company</th>\n",
       "      <th>grades</th>\n",
       "      <th>salary</th>\n",
       "      <th>expenditure</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>hkd1</td>\n",
       "      <td>990623-2</td>\n",
       "      <td>F</td>\n",
       "      <td>161.9</td>\n",
       "      <td>22</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>4100</td>\n",
       "      <td>1975</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>hkd10</td>\n",
       "      <td>900303-2</td>\n",
       "      <td>F</td>\n",
       "      <td>169.4</td>\n",
       "      <td>31</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>B</td>\n",
       "      <td>4720</td>\n",
       "      <td>2970</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name    jumin7 gender  height  age blood_type company grades  salary  \\\n",
       "0   hkd1  990623-2      F   161.9   22          A       A      A    4100   \n",
       "1  hkd10  900303-2      F   169.4   31          A       A      B    4720   \n",
       "\n",
       "   expenditure  \n",
       "0         1975  \n",
       "1         2970  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_hk[:2]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## $\\alpha$(알파) 퀴즈:\n",
    "전체 소득 대비 소비액 비율을 나타내는 합성 변수('expenditure_per_salary')를 만들고자 한다. \n",
    "<br> 수식 : expenditure_per_salary = expenditure / salary \n",
    "<br> expenditure_per_salary 합성변수를 만들고 해당 변수의 Company 그룹별 평균을 구하시오 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df_hk.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      0.481707\n",
       "1      0.629237\n",
       "2      0.811126\n",
       "3      0.722906\n",
       "4      0.914579\n",
       "         ...   \n",
       "245    0.695994\n",
       "246    0.701125\n",
       "247    0.828125\n",
       "248    0.843037\n",
       "249    0.815930\n",
       "Length: 250, dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['expenditure_per_salary'] = df['expenditure']/df['salary']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>jumin7</th>\n",
       "      <th>gender</th>\n",
       "      <th>height</th>\n",
       "      <th>age</th>\n",
       "      <th>blood_type</th>\n",
       "      <th>company</th>\n",
       "      <th>grades</th>\n",
       "      <th>salary</th>\n",
       "      <th>expenditure</th>\n",
       "      <th>expenditure_per_salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>hkd1</td>\n",
       "      <td>990623-2</td>\n",
       "      <td>F</td>\n",
       "      <td>161.9</td>\n",
       "      <td>22</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>4100</td>\n",
       "      <td>1975</td>\n",
       "      <td>0.481707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>hkd10</td>\n",
       "      <td>900303-2</td>\n",
       "      <td>F</td>\n",
       "      <td>169.4</td>\n",
       "      <td>31</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>B</td>\n",
       "      <td>4720</td>\n",
       "      <td>2970</td>\n",
       "      <td>0.629237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>hkd100</td>\n",
       "      <td>681205-2</td>\n",
       "      <td>F</td>\n",
       "      <td>168.3</td>\n",
       "      <td>55</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>B</td>\n",
       "      <td>7280</td>\n",
       "      <td>5905</td>\n",
       "      <td>0.811126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>hkd101</td>\n",
       "      <td>931226-2</td>\n",
       "      <td>F</td>\n",
       "      <td>155.3</td>\n",
       "      <td>28</td>\n",
       "      <td>AB</td>\n",
       "      <td>B</td>\n",
       "      <td>B</td>\n",
       "      <td>4060</td>\n",
       "      <td>2935</td>\n",
       "      <td>0.722906</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>hkd102</td>\n",
       "      <td>920123-1</td>\n",
       "      <td>M</td>\n",
       "      <td>188.6</td>\n",
       "      <td>29</td>\n",
       "      <td>O</td>\n",
       "      <td>B</td>\n",
       "      <td>F</td>\n",
       "      <td>4390</td>\n",
       "      <td>4015</td>\n",
       "      <td>0.914579</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     name    jumin7 gender  height  age blood_type company grades  salary  \\\n",
       "0    hkd1  990623-2      F   161.9   22          A       A      A    4100   \n",
       "1   hkd10  900303-2      F   169.4   31          A       A      B    4720   \n",
       "2  hkd100  681205-2      F   168.3   55          A       A      B    7280   \n",
       "3  hkd101  931226-2      F   155.3   28         AB       B      B    4060   \n",
       "4  hkd102  920123-1      M   188.6   29          O       B      F    4390   \n",
       "\n",
       "   expenditure  expenditure_per_salary  \n",
       "0         1975                0.481707  \n",
       "1         2970                0.629237  \n",
       "2         5905                0.811126  \n",
       "3         2935                0.722906  \n",
       "4         4015                0.914579  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "company\n",
       "A    6522.5\n",
       "B    5364.4\n",
       "C    8013.6\n",
       "Name: salary, dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('company')['salary'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "company\n",
       "A    0.765371\n",
       "B    0.751797\n",
       "C    0.790910\n",
       "Name: expenditure_per_salary, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby('company')['expenditure_per_salary'].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "hfMi2HeL4piH"
   },
   "source": [
    "\n",
    "## 1-1. 단일 회귀 statemodels - ols()\n",
    "\n",
    "연봉으로 지출액을 예측할 수 있을까 ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "executionInfo": {
     "elapsed": 880,
     "status": "ok",
     "timestamp": 1668725563407,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "h9KHPZGNxEQZ"
   },
   "outputs": [],
   "source": [
    "# statemodels - ols() 클래스 호출\n",
    "from statsmodels.formula.api import ols  # formula 형식\n",
    "from statsmodels.formula.api import ols"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 시각화 (x=\"salary\", y=\"expenditure\")\n",
    "sns.scatterplot( x=\"salary\", y=\"expenditure\", data = df, hue= 'company')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>expenditure</th>\n",
       "      <th>salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>expenditure</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.972185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>salary</th>\n",
       "      <td>0.972185</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             expenditure    salary\n",
       "expenditure     1.000000  0.972185\n",
       "salary          0.972185  1.000000"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 독립변수, 종속변수 상관계수 확인\n",
    "df[['expenditure', 'salary']].corr() # 상관계수 5보다 크면 강한 상관관계"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "executionInfo": {
     "elapsed": 18,
     "status": "ok",
     "timestamp": 1668725563408,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "neoHu3sOzXjP"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<statsmodels.regression.linear_model.RegressionResultsWrapper at 0x2a2f7930ee0>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 모델선택, 독립변수(salary), 종속변수(expenditure) 입력, fit\n",
    "from statsmodels.formula.api import ols?\n",
    "model1_1 = ols(formula = 'expenditure ~ salary'   , data = df).fit()\n",
    "model1_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<statsmodels.regression.linear_model.RegressionResultsWrapper at 0x2a2f7930ee0>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Attribute 확인\n",
    "model1_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 478
    },
    "executionInfo": {
     "elapsed": 16,
     "status": "ok",
     "timestamp": 1668725563409,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "UDwB3G7kCyRL",
    "outputId": "d72f7d78-3bbc-4483-93ef-a21d562937bb"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>expenditure</td>   <th>  R-squared:         </th> <td>   0.945</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.945</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   4273.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 06 Mar 2023</td> <th>  Prob (F-statistic):</th> <td>2.40e-158</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>15:01:53</td>     <th>  Log-Likelihood:    </th> <td> -1873.6</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   250</td>      <th>  AIC:               </th> <td>   3751.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   248</td>      <th>  BIC:               </th> <td>   3758.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>-1246.9920</td> <td>   99.061</td> <td>  -12.588</td> <td> 0.000</td> <td>-1442.100</td> <td>-1051.884</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>salary</th>    <td>    0.9781</td> <td>    0.015</td> <td>   65.367</td> <td> 0.000</td> <td>    0.949</td> <td>    1.008</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 9.379</td> <th>  Durbin-Watson:     </th> <td>   1.840</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.009</td> <th>  Jarque-Bera (JB):  </th> <td>   5.059</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.130</td> <th>  Prob(JB):          </th> <td>  0.0797</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.354</td> <th>  Cond. No.          </th> <td>2.37e+04</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 2.37e+04. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:            expenditure   R-squared:                       0.945\n",
       "Model:                            OLS   Adj. R-squared:                  0.945\n",
       "Method:                 Least Squares   F-statistic:                     4273.\n",
       "Date:                Mon, 06 Mar 2023   Prob (F-statistic):          2.40e-158\n",
       "Time:                        15:01:53   Log-Likelihood:                -1873.6\n",
       "No. Observations:                 250   AIC:                             3751.\n",
       "Df Residuals:                     248   BIC:                             3758.\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept  -1246.9920     99.061    -12.588      0.000   -1442.100   -1051.884\n",
       "salary         0.9781      0.015     65.367      0.000       0.949       1.008\n",
       "==============================================================================\n",
       "Omnibus:                        9.379   Durbin-Watson:                   1.840\n",
       "Prob(Omnibus):                  0.009   Jarque-Bera (JB):                5.059\n",
       "Skew:                          -0.130   Prob(JB):                       0.0797\n",
       "Kurtosis:                       2.354   Cond. No.                     2.37e+04\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 2.37e+04. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 모델 summary 결정계수 / 회귀 계수(coef) 등 확인 \n",
    "model1_1.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## $$y= 0.9781 \\times x - 1246.9920$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(Intercept   -1246.992024\n",
       " salary          0.978135\n",
       " dtype: float64,\n",
       " -1246.992024494655,\n",
       " 0.9781347364827973,\n",
       " -399.80393170414754)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# model1_1 attributes (params, predict, resid 잔차)\n",
    "model1_1.params, model1_1.params[0], model1_1.params[1], model1_1.resid[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 회귀식\n",
    "def liner1_1(x):\n",
    "    return (model1_1.params[1] * x + model1_1.params[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>jumin7</th>\n",
       "      <th>gender</th>\n",
       "      <th>height</th>\n",
       "      <th>age</th>\n",
       "      <th>blood_type</th>\n",
       "      <th>company</th>\n",
       "      <th>grades</th>\n",
       "      <th>salary</th>\n",
       "      <th>expenditure</th>\n",
       "      <th>expenditure_per_salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>hkd1</td>\n",
       "      <td>990623-2</td>\n",
       "      <td>F</td>\n",
       "      <td>161.9</td>\n",
       "      <td>22</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>4100</td>\n",
       "      <td>1975</td>\n",
       "      <td>0.481707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>hkd10</td>\n",
       "      <td>900303-2</td>\n",
       "      <td>F</td>\n",
       "      <td>169.4</td>\n",
       "      <td>31</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>B</td>\n",
       "      <td>4720</td>\n",
       "      <td>2970</td>\n",
       "      <td>0.629237</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name    jumin7 gender  height  age blood_type company grades  salary  \\\n",
       "0   hkd1  990623-2      F   161.9   22          A       A      A    4100   \n",
       "1  hkd10  900303-2      F   169.4   31          A       A      B    4720   \n",
       "\n",
       "   expenditure  expenditure_per_salary  \n",
       "0         1975                0.481707  \n",
       "1         2970                0.629237  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# sample data\n",
    "df[:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2763.3603950848137"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 회귀식으로 예측값 확인\n",
    "liner1_1(4100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>jumin7</th>\n",
       "      <th>gender</th>\n",
       "      <th>height</th>\n",
       "      <th>age</th>\n",
       "      <th>blood_type</th>\n",
       "      <th>company</th>\n",
       "      <th>grades</th>\n",
       "      <th>salary</th>\n",
       "      <th>expenditure</th>\n",
       "      <th>expenditure_per_salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>hkd1</td>\n",
       "      <td>990623-2</td>\n",
       "      <td>F</td>\n",
       "      <td>161.9</td>\n",
       "      <td>22</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>4100</td>\n",
       "      <td>1975</td>\n",
       "      <td>0.481707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>hkd10</td>\n",
       "      <td>900303-2</td>\n",
       "      <td>F</td>\n",
       "      <td>169.4</td>\n",
       "      <td>31</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>B</td>\n",
       "      <td>4720</td>\n",
       "      <td>2970</td>\n",
       "      <td>0.629237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>hkd100</td>\n",
       "      <td>681205-2</td>\n",
       "      <td>F</td>\n",
       "      <td>168.3</td>\n",
       "      <td>55</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>B</td>\n",
       "      <td>7280</td>\n",
       "      <td>5905</td>\n",
       "      <td>0.811126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>hkd101</td>\n",
       "      <td>931226-2</td>\n",
       "      <td>F</td>\n",
       "      <td>155.3</td>\n",
       "      <td>28</td>\n",
       "      <td>AB</td>\n",
       "      <td>B</td>\n",
       "      <td>B</td>\n",
       "      <td>4060</td>\n",
       "      <td>2935</td>\n",
       "      <td>0.722906</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>hkd102</td>\n",
       "      <td>920123-1</td>\n",
       "      <td>M</td>\n",
       "      <td>188.6</td>\n",
       "      <td>29</td>\n",
       "      <td>O</td>\n",
       "      <td>B</td>\n",
       "      <td>F</td>\n",
       "      <td>4390</td>\n",
       "      <td>4015</td>\n",
       "      <td>0.914579</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     name    jumin7 gender  height  age blood_type company grades  salary  \\\n",
       "0    hkd1  990623-2      F   161.9   22          A       A      A    4100   \n",
       "1   hkd10  900303-2      F   169.4   31          A       A      B    4720   \n",
       "2  hkd100  681205-2      F   168.3   55          A       A      B    7280   \n",
       "3  hkd101  931226-2      F   155.3   28         AB       B      B    4060   \n",
       "4  hkd102  920123-1      M   188.6   29          O       B      F    4390   \n",
       "\n",
       "   expenditure  expenditure_per_salary  \n",
       "0         1975                0.481707  \n",
       "1         2970                0.629237  \n",
       "2         5905                0.811126  \n",
       "3         2935                0.722906  \n",
       "4         4015                0.914579  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# sample data\n",
    "df[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3047.0194686648247"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 회귀식으로 예측값 확인\n",
    "liner1_1(4390)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 13,
     "status": "ok",
     "timestamp": 1668725563410,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "o_O8D4mvOGxB",
    "outputId": "7fa6d445-b47a-4774-c850-a602476ad980"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    2763.360395\n",
       "1    3369.803932\n",
       "2    5873.828857\n",
       "3    2724.235006\n",
       "4    3047.019469\n",
       "dtype: float64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# predict로 예측값 확인\n",
    "predict1_1 = model1_1.predict(exog=df['salary'])\n",
    "predict1_1[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 297
    },
    "executionInfo": {
     "elapsed": 13,
     "status": "ok",
     "timestamp": 1668725563411,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "yOu0_IsLU8Ix",
    "outputId": "a17180ac-b00a-4624-b7f9-7828babd8edb"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 시각화 \n",
    "\n",
    "fig, ax = plt.subplots( nrows= 1 , ncols=2, figsize=(14, 5))\n",
    "sns.scatterplot(x=df['salary'], y=df['expenditure'], palette='Set1', ax= ax[0] )\n",
    "sns.scatterplot(x=df['salary'], y=predict1_1, palette='Set2', ax=ax[1] )\n",
    "\n",
    "ax[0].set_title('expenditure ')\n",
    "ax[1].set_title('predict1_1')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 다중 회귀 가정 4가지 선형성, 정규성, 등분산, 독립성"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 선형 회귀 가정 1: 선형성 \n",
    "\n",
    "F 검정의 pvalue로 확인"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='salary'>"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 선형회귀 그래프, regplot: scatter plot, regression line, confidence band를 한 번에 그리는 기능\n",
    "sns.regplot(x='salary', y='expenditure', data=df)\n",
    "sns.regplot(x=df['salary'], y=predict1_1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# F 검정의 pvalue로 확인\n",
    "model1_1.f_pvalue\n",
    "model1_1.f_pvalue < 0.05 # 선형성이 있다고 판단함"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 선형 회귀 가정 2: 잔차의 정규성\n",
    "\n",
    "<br>잔차 그래프로 확인\n",
    "<br>shapiro 의 경우 p값이 0.05 이상이면 정규성 만족한다 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     -788.360395\n",
       "1     -399.803932\n",
       "2       31.171143\n",
       "3      210.764994\n",
       "4      967.980531\n",
       "          ...    \n",
       "245   -725.169784\n",
       "246   -722.545952\n",
       "247     46.914133\n",
       "248     63.531733\n",
       "249     35.325543\n",
       "Length: 250, dtype: float64"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 잔차 계산\n",
    "residual = df['expenditure'] - predict1_1\n",
    "residual"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 잔차 그래프 1\n",
    "plt.scatter(df['salary'], residual)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 잔차 그래프 2\n",
    "sns.distplot(residual)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ShapiroResult(statistic=0.9549193382263184, pvalue=5.075988269709342e-07)"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# shapiro 정규성 검정, Ho: 정규성을 가진다 (p-value > 0.05)\n",
    "from scipy.stats import shapiro\n",
    "shapiro(residual)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# pvalue가 0.05보다 작으면 정규성 만족 못함\n",
    "shapiro(residual)[1] > 0.05"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# residual이 그룹화 되어 있어 shapiro test에서 정규성이 안 나옴\n",
    "\n",
    "import scipy.stats as stats\n",
    "\n",
    "stats.probplot(residual, plot=plt)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 선형 회귀 가정 3: 잔차의 등분산\n",
    "\n",
    "예측값과 잔차의 산점도로 파악"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 잔차그래프로 확인, X가 커질때 잔차의 간격이 변하면 안됨, 간격아 일정하면 등분산성 만족\n",
    "sns.regplot(x=predict1_1, y=residual)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 선형 회귀 가정 4: 잔차의 독립성\n",
    "잔차가 독립인지(자기상관성이 있는지) 검정"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.840170797849197"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#perform Durbin-Watson test\n",
    "\n",
    "from statsmodels.stats.stattools import durbin_watson\n",
    "durbin_watson(model1_1.resid)\n",
    "\n",
    "# 더빈 왓슨 통계량은 0 ~ 4사이의 값을 갖을 수 있음\n",
    "# 0에 가까울수록 → 양의 상관관계\n",
    "# 4에 가까울수록 → 음의 상관관계\n",
    "# 2에 가까울수록 → 오차항의 자기상관이 없음"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "5YwW9JcI1BcB"
   },
   "source": [
    "## 1-2. 단일 회귀 sklearn.linear_model\n",
    "\n",
    "연봉으로 지출액을 예측할 수 있을까 ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "executionInfo": {
     "elapsed": 414,
     "status": "ok",
     "timestamp": 1668725563815,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "4k07iKJxSLxO"
   },
   "outputs": [],
   "source": [
    "# LinearRegression 호출\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 16,
     "status": "ok",
     "timestamp": 1668725563815,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "YZcxocXs0cid",
    "outputId": "bf2acc92-40d2-4340-de1d-416da5bd064b",
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 모델선택, 독립변수(salary), 종속변수(expenditure) 입력, fit \n",
    "\n",
    "model1_2 = LinearRegression(fit_intercept=True).fit( X=df[['salary']]      , y=df['expenditure'])\n",
    "model1_2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 16:10분에 시작하겠습니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 16,
     "status": "ok",
     "timestamp": 1668725563816,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "uXLrtfOd2api",
    "outputId": "fabc4aba-ceb0-4084-a7b9-18e1da99978a"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.97813474])"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 회귀계수 확인\n",
    "model1_2.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 15,
     "status": "ok",
     "timestamp": 1668725563817,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "U7bJWMjX4d89",
    "outputId": "364f40c0-7f47-4b94-aedd-94f53fe84574"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1246.9920244946543"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# intercept_ 확인\n",
    "model1_2.intercept_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## $$y= 0.97813 \\times x - 1246.9920$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 13,
     "status": "ok",
     "timestamp": 1668725563817,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "8O6_4ujj3TcC",
    "outputId": "2301dda2-27fb-43f4-be63-b996be4cd07a"
   },
   "outputs": [],
   "source": [
    "# 회귀식\n",
    "def liner1_2(x):\n",
    "    return (model1_2.coef_[0] * x) + model1_2.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>jumin7</th>\n",
       "      <th>gender</th>\n",
       "      <th>height</th>\n",
       "      <th>age</th>\n",
       "      <th>blood_type</th>\n",
       "      <th>company</th>\n",
       "      <th>grades</th>\n",
       "      <th>salary</th>\n",
       "      <th>expenditure</th>\n",
       "      <th>expenditure_per_salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>hkd1</td>\n",
       "      <td>990623-2</td>\n",
       "      <td>F</td>\n",
       "      <td>161.9</td>\n",
       "      <td>22</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>4100</td>\n",
       "      <td>1975</td>\n",
       "      <td>0.481707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>hkd10</td>\n",
       "      <td>900303-2</td>\n",
       "      <td>F</td>\n",
       "      <td>169.4</td>\n",
       "      <td>31</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>B</td>\n",
       "      <td>4720</td>\n",
       "      <td>2970</td>\n",
       "      <td>0.629237</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    name    jumin7 gender  height  age blood_type company grades  salary  \\\n",
       "0   hkd1  990623-2      F   161.9   22          A       A      A    4100   \n",
       "1  hkd10  900303-2      F   169.4   31          A       A      B    4720   \n",
       "\n",
       "   expenditure  expenditure_per_salary  \n",
       "0         1975                0.481707  \n",
       "1         2970                0.629237  "
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# sample data\n",
    "df[:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2763.360395084815"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 회귀식으로 예측\n",
    "liner1_2(4100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 11,
     "status": "ok",
     "timestamp": 1668725563818,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "5bqynxLp2rHl",
    "outputId": "f3b36c7d-9f44-4b69-daea-7bd1aa1b28da"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2763.36039508, 3369.8039317 , 5873.8288571 , 2724.23500563,\n",
       "       3047.01946866])"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# predict로 예측\n",
    "predict1_2 = model1_2.predict(X=df[['salary']])\n",
    "predict1_2[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 297
    },
    "executionInfo": {
     "elapsed": 991,
     "status": "ok",
     "timestamp": 1668725564801,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "B75eB3OP2uUr",
    "outputId": "089c588a-fd0e-4319-ceee-a6710ce26841"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='salary'>"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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lJSUNMMnap3++9//ivj4eKHT6UTPnj3Fm2++6fQ6n0vzMplM4tFHHxWdOnUSPj4+omvXruKpp55y+gubz8S9vv/+ewGg3tfUqVOFEM378z927JgYP3688PX1FSEhIWLGjBmiurranR/fI13umRw9evSirwEQ33//veMenvZMJCGEaFwfEBEREVHrwDk6RERE5LUYdIiIiMhrMegQERGR12LQISIiIq/FoENERERei0GHiIiIvBaDDhEREXktBh0iIiLyWgw6ROQ1JEnCZ5991tLNICIPwqBDREREXotBh4joHKvV2tJNICIXY9AhIo/y8ccfIyEhAb6+vggNDcWoUaNQUVGBnTt3YvTo0QgLC4Ner8fw4cOxe/fuy95r/vz56NGjB/z8/NC1a1c888wzTmFm4cKF6NevH9566y107doVOp0O//nPfxAaGgqz2ex0rzvuuANTpkxxy2cmIvdh0CEij3H69Gncc889uP/++3Hw4EH88MMPuP322yGEQFlZGaZOnYoff/wR27ZtQ0xMDG655RaUlZVd8n6BgYFYvXo1Dhw4gH/9619YtWoVli1b5lSTk5ODDz/8EJ988gkyMzMxadIk2O12fPHFF46aoqIifPnll/jTn/7kts9ORO7B08uJyGPs3r0bAwYMwG+//YbOnTtfttZutyM4OBhr167FhAkTANRMRl6/fj1uu+22i77nxRdfxAcffICff/4ZQE2PTmpqKk6dOoXw8HBH3fTp0/Hbb79hw4YNAIB//etfeOWVV5CTkwNJklzwSYmoubBHh4g8Rt++fTFy5EgkJCTgzjvvxKpVq1BSUgIAKCgowF/+8hf06NEDer0eer0e5eXlOH78+CXv9/HHH2PYsGGIiopCQEAAnnnmmXr1nTt3dgo5APDggw9i06ZNOHXqFADg7bffxn333ceQQ9QKMegQkcdQqVTYvHkzvv76a/Tq1QuvvvoqYmNjcfToUdx3333YtWsXXn75ZWRkZCAzMxOhoaGwWCwXvde2bdtw99134+abb8aXX36JPXv24KmnnqpX7+/vX++9/fv3R9++ffHOO+9g9+7d2LdvH+677z53fGQicjN1SzeAiOhCkiTh+uuvx/XXX4+//vWv6Ny5M9avX48ff/wRr7/+Om655RYAwIkTJ1BUVHTJ+/z000/o3LkznnrqKce1Y8eONbgdf/7zn7Fs2TKcOnUKo0aNQnR0dNM/FBG1GAYdIvIY27dvx3fffYcxY8YgIiIC27dvR2FhIeLi4tC9e3e8++67GDhwIEwmEx5//HH4+vpe8l7du3fH8ePHsW7dOlx33XX46quvsH79+ga3ZfLkyZg7dy5WrVqFd955xxUfj4haAIeuiMhjBAUFYcuWLbjlllvQo0cPPP300/jnP/+Jm2++GW+99RZKSkrQv39/JCcnY9asWYiIiLjkvX7/+9/jsccew4wZM9CvXz9kZGTgmWeeaVRb7rjjDgQEBFxycjMReT6uuiIiuoTRo0cjLi4Or7zySks3hYiaiEGHiKiO4uJibNq0CZMnT8aBAwcQGxvb0k0ioibiHB0iojquvfZalJSUYPHixQw5RK0ce3SIiIjIa3EyMhEREXktBh0iIiLyWgw6RERE5LUYdIiIiMhrMegQERGR12LQISIiIq/FoENERERei0GHiIiIvNb/A25C8oYYqLh1AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 선형회귀 그래프\n",
    "sns.regplot(x=df['salary'], y=predict1_2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## statemodels vs. sklearn 비교 \n",
    " - statemodels는 통계기반 강점, summary 표등 통계자료 보기 편함 \n",
    " - sklearn는 머신러닝 관점\n",
    " - 입력값의 차이( statemodels ols의 경우 formula 문법이 있음 / sklearn는 fit() 활용) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# statemodels vs. sklearn 제공 기능 비교\n",
    "\n",
    "# model1_1.   # 통계 중심\n",
    "# model1_2.   # 머신러닝 중심"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "0DC3DnJKED-q"
   },
   "source": [
    "## 1-3. 단일 회귀 train_test_split / statemodels - ols()\n",
    "\n",
    "train, test data 분할 (train_size= 0.7, random_state=123)\n",
    "<br> 연봉으로 지출액을 예측할 수 있을까 ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 23,
     "status": "ok",
     "timestamp": 1668725564802,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "7Aq25y_2C1SX",
    "outputId": "862a0777-6a64-4c3f-f01c-64ad83b48a71"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "데이터셋 총합 : 250 , df_train : 175 , df_test : 75\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>jumin7</th>\n",
       "      <th>gender</th>\n",
       "      <th>height</th>\n",
       "      <th>age</th>\n",
       "      <th>blood_type</th>\n",
       "      <th>company</th>\n",
       "      <th>grades</th>\n",
       "      <th>salary</th>\n",
       "      <th>expenditure</th>\n",
       "      <th>expenditure_per_salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>193</th>\n",
       "      <td>hkd48</td>\n",
       "      <td>780113-1</td>\n",
       "      <td>M</td>\n",
       "      <td>184.0</td>\n",
       "      <td>43</td>\n",
       "      <td>AB</td>\n",
       "      <td>A</td>\n",
       "      <td>C</td>\n",
       "      <td>6530</td>\n",
       "      <td>5405</td>\n",
       "      <td>0.827718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>243</th>\n",
       "      <td>hkd93</td>\n",
       "      <td>730719-1</td>\n",
       "      <td>M</td>\n",
       "      <td>180.4</td>\n",
       "      <td>48</td>\n",
       "      <td>AB</td>\n",
       "      <td>A</td>\n",
       "      <td>B</td>\n",
       "      <td>7560</td>\n",
       "      <td>6185</td>\n",
       "      <td>0.818122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152</th>\n",
       "      <td>hkd236</td>\n",
       "      <td>860621-1</td>\n",
       "      <td>M</td>\n",
       "      <td>166.2</td>\n",
       "      <td>35</td>\n",
       "      <td>A</td>\n",
       "      <td>C</td>\n",
       "      <td>B</td>\n",
       "      <td>10410</td>\n",
       "      <td>9285</td>\n",
       "      <td>0.891931</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>184</th>\n",
       "      <td>hkd4</td>\n",
       "      <td>960809-1</td>\n",
       "      <td>M</td>\n",
       "      <td>177.6</td>\n",
       "      <td>25</td>\n",
       "      <td>O</td>\n",
       "      <td>A</td>\n",
       "      <td>B</td>\n",
       "      <td>4450</td>\n",
       "      <td>3075</td>\n",
       "      <td>0.691011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>190</th>\n",
       "      <td>hkd45</td>\n",
       "      <td>811022-1</td>\n",
       "      <td>M</td>\n",
       "      <td>182.1</td>\n",
       "      <td>40</td>\n",
       "      <td>B</td>\n",
       "      <td>A</td>\n",
       "      <td>C</td>\n",
       "      <td>5800</td>\n",
       "      <td>4675</td>\n",
       "      <td>0.806034</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       name    jumin7 gender  height  age blood_type company grades  salary  \\\n",
       "193   hkd48  780113-1      M   184.0   43         AB       A      C    6530   \n",
       "243   hkd93  730719-1      M   180.4   48         AB       A      B    7560   \n",
       "152  hkd236  860621-1      M   166.2   35          A       C      B   10410   \n",
       "184    hkd4  960809-1      M   177.6   25          O       A      B    4450   \n",
       "190   hkd45  811022-1      M   182.1   40          B       A      C    5800   \n",
       "\n",
       "     expenditure  expenditure_per_salary  \n",
       "193         5405                0.827718  \n",
       "243         6185                0.818122  \n",
       "152         9285                0.891931  \n",
       "184         3075                0.691011  \n",
       "190         4675                0.806034  "
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# train_test_split (train_size= 0.7, random_state=123)\n",
    "from sklearn.model_selection import train_test_split\n",
    "df_train1, df_test1 = train_test_split(df,train_size=0.7, random_state=123)\n",
    "\n",
    "print('데이터셋 총합 :', len(df), ', df_train :', len(df_train1), ', df_test :', len(df_test1))\n",
    "df_train1[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "executionInfo": {
     "elapsed": 21,
     "status": "ok",
     "timestamp": 1668725564804,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "DazBzkg2F5Xz"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<statsmodels.regression.linear_model.RegressionResultsWrapper at 0x2a2fcbfed30>"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ols 모델링, fit\n",
    "from statsmodels.formula.api import ols\n",
    "model1_3 = ols(formula='expenditure ~ salary', data=df_train1).fit()\n",
    "model1_3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9781347364827973"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model1_1.params[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 478
    },
    "executionInfo": {
     "elapsed": 21,
     "status": "ok",
     "timestamp": 1668725564804,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "Z6DoLVq6GKrs",
    "outputId": "2a1d9e56-c6d9-4bd1-ba59-463f010ec450",
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>expenditure</td>   <th>  R-squared:         </th> <td>   0.952</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.952</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   3453.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 06 Mar 2023</td> <th>  Prob (F-statistic):</th> <td>3.14e-116</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>16:29:50</td>     <th>  Log-Likelihood:    </th> <td> -1306.3</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   175</td>      <th>  AIC:               </th> <td>   2617.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   173</td>      <th>  BIC:               </th> <td>   2623.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>-1278.0961</td> <td>  110.539</td> <td>  -11.562</td> <td> 0.000</td> <td>-1496.275</td> <td>-1059.917</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>salary</th>    <td>    0.9799</td> <td>    0.017</td> <td>   58.760</td> <td> 0.000</td> <td>    0.947</td> <td>    1.013</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 5.448</td> <th>  Durbin-Watson:     </th> <td>   1.968</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.066</td> <th>  Jarque-Bera (JB):  </th> <td>   3.336</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.140</td> <th>  Prob(JB):          </th> <td>   0.189</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.385</td> <th>  Cond. No.          </th> <td>2.28e+04</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 2.28e+04. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:            expenditure   R-squared:                       0.952\n",
       "Model:                            OLS   Adj. R-squared:                  0.952\n",
       "Method:                 Least Squares   F-statistic:                     3453.\n",
       "Date:                Mon, 06 Mar 2023   Prob (F-statistic):          3.14e-116\n",
       "Time:                        16:29:50   Log-Likelihood:                -1306.3\n",
       "No. Observations:                 175   AIC:                             2617.\n",
       "Df Residuals:                     173   BIC:                             2623.\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept  -1278.0961    110.539    -11.562      0.000   -1496.275   -1059.917\n",
       "salary         0.9799      0.017     58.760      0.000       0.947       1.013\n",
       "==============================================================================\n",
       "Omnibus:                        5.448   Durbin-Watson:                   1.968\n",
       "Prob(Omnibus):                  0.066   Jarque-Bera (JB):                3.336\n",
       "Skew:                          -0.140   Prob(JB):                        0.189\n",
       "Kurtosis:                       2.385   Cond. No.                     2.28e+04\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 2.28e+04. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# summary, 회귀계수 확인\n",
    "model1_3.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## $$y= 0.9799 \\times x - 1278.0961$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "# model1_3 과 model1_1.summary()와 비교, coef_, R-squared, train data set이 바뀌었음"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>jumin7</th>\n",
       "      <th>gender</th>\n",
       "      <th>height</th>\n",
       "      <th>age</th>\n",
       "      <th>blood_type</th>\n",
       "      <th>company</th>\n",
       "      <th>grades</th>\n",
       "      <th>salary</th>\n",
       "      <th>expenditure</th>\n",
       "      <th>expenditure_per_salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>hkd213</td>\n",
       "      <td>910216-2</td>\n",
       "      <td>F</td>\n",
       "      <td>158.3</td>\n",
       "      <td>30</td>\n",
       "      <td>B</td>\n",
       "      <td>C</td>\n",
       "      <td>C</td>\n",
       "      <td>7520</td>\n",
       "      <td>6770</td>\n",
       "      <td>0.900266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>187</th>\n",
       "      <td>hkd42</td>\n",
       "      <td>840718-1</td>\n",
       "      <td>M</td>\n",
       "      <td>191.5</td>\n",
       "      <td>37</td>\n",
       "      <td>O</td>\n",
       "      <td>A</td>\n",
       "      <td>B</td>\n",
       "      <td>5620</td>\n",
       "      <td>3870</td>\n",
       "      <td>0.688612</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       name    jumin7 gender  height  age blood_type company grades  salary  \\\n",
       "127  hkd213  910216-2      F   158.3   30          B       C      C    7520   \n",
       "187   hkd42  840718-1      M   191.5   37          O       A      B    5620   \n",
       "\n",
       "     expenditure  expenditure_per_salary  \n",
       "127         6770                0.900266  \n",
       "187         3870                0.688612  "
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test1[:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 21,
     "status": "ok",
     "timestamp": 1668725564805,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "B5MrMyDZIwi4",
    "outputId": "c4bb49ae-6924-40ce-d05c-7850de6cb1a8"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6090.600256122474"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 회귀식 y = 0.9799 * salary - 1278.0961\n",
    "\n",
    "model1_3.params[1] * 7520 + model1_3.params[0]\n",
    "# 0.9799 * 5620 - 1278.0961"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-1278.096103555104, 0.9798798350635078)"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model1_3.params[0], model1_3.params[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 19,
     "status": "ok",
     "timestamp": 1668725564805,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "H54b9G76GOEd",
    "outputId": "db25a4e7-d634-4bbe-80bb-78810c6606d2"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "127    6090.600256\n",
       "187    4228.828570\n",
       "24     4268.023763\n",
       "206    2798.204010\n",
       "235    4258.224965\n",
       "          ...     \n",
       "128    5512.471153\n",
       "132    7119.474083\n",
       "167    5355.690380\n",
       "217    3258.747533\n",
       "50     3542.912685\n",
       "Length: 75, dtype: float64"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# predict로 예측\n",
    "model1_3.predict(df_test1[['salary']])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "7OEylfG6Ou24"
   },
   "source": [
    "## 1-4. $\\pi$(파이) Quiz 단일회귀 train_test_split / statemodels - ols() \n",
    "\n",
    "\n",
    "<br>나이로 연봉을 예측할 수 있을까 ? \n",
    "<br>독립변수: 나이(age)\n",
    "<br>종속변수: 연봉(salary)\n",
    "\n",
    "<br>1. train, test data 분할하시오(train_size= 0.7, random_state=123)\n",
    "<br>2. 회귀식을 수립하시오\n",
    "<br>3. 37세의 연봉을 예측하시오"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# train_test_split (train_size= 0.7, random_state=123)\n",
    "df_train1, df_test1 = train_test_split(df, train_size= 0.7, random_state=123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {
    "executionInfo": {
     "elapsed": 23,
     "status": "ok",
     "timestamp": 1668725565528,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "06RsHdggOuGJ"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<statsmodels.regression.linear_model.RegressionResultsWrapper at 0x2a2fd5cdc40>"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ols모델링, fit\n",
    "from statsmodels.formula.api import ols\n",
    "model1_4 = ols(formula='salary ~ age', data= df_train1).fit()\n",
    "model1_4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 444
    },
    "executionInfo": {
     "elapsed": 24,
     "status": "ok",
     "timestamp": 1668725565529,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "sQPFFOT2PBnT",
    "outputId": "01ae587c-0df9-4274-b27f-5efbc5838e94"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>salary</td>      <th>  R-squared:         </th> <td>   0.281</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.276</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   67.46</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 06 Mar 2023</td> <th>  Prob (F-statistic):</th> <td>4.83e-14</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>16:43:34</td>     <th>  Log-Likelihood:    </th> <td> -1543.0</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   175</td>      <th>  AIC:               </th> <td>   3090.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   173</td>      <th>  BIC:               </th> <td>   3096.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td> 1821.4088</td> <td>  564.336</td> <td>    3.228</td> <td> 0.001</td> <td>  707.539</td> <td> 2935.278</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>age</th>       <td>  115.2576</td> <td>   14.033</td> <td>    8.213</td> <td> 0.000</td> <td>   87.559</td> <td>  142.956</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>56.938</td> <th>  Durbin-Watson:     </th> <td>   2.149</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 109.516</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.578</td> <th>  Prob(JB):          </th> <td>1.66e-24</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 5.249</td> <th>  Cond. No.          </th> <td>    183.</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                 salary   R-squared:                       0.281\n",
       "Model:                            OLS   Adj. R-squared:                  0.276\n",
       "Method:                 Least Squares   F-statistic:                     67.46\n",
       "Date:                Mon, 06 Mar 2023   Prob (F-statistic):           4.83e-14\n",
       "Time:                        16:43:34   Log-Likelihood:                -1543.0\n",
       "No. Observations:                 175   AIC:                             3090.\n",
       "Df Residuals:                     173   BIC:                             3096.\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept   1821.4088    564.336      3.228      0.001     707.539    2935.278\n",
       "age          115.2576     14.033      8.213      0.000      87.559     142.956\n",
       "==============================================================================\n",
       "Omnibus:                       56.938   Durbin-Watson:                   2.149\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              109.516\n",
       "Skew:                           1.578   Prob(JB):                     1.66e-24\n",
       "Kurtosis:                       5.249   Cond. No.                         183.\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# summary, 회귀계수 확인\n",
    "model1_4.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 16:42까지"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## $$y= 115.2576 \\times x + 1821.4088$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 24,
     "status": "ok",
     "timestamp": 1668725565531,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "dwZPPq6ov53q",
    "outputId": "889f8e42-1c22-4728-8594-928f66098d11",
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6085.94"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 회귀식으로 예측 y = 115.2576 * age + 1821.4088\n",
    "115.2576 * 37 + 1821.4088"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   age\n",
       "0   37"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.DataFrame([37], columns=['age'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    6085.940191\n",
       "dtype: float64"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# predict 개별값 입력으로 예측\n",
    "model1_4.predict(exog=pd.DataFrame([37], columns=['age']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    6085.940191\n",
       "dtype: float64"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# predict 개별값 입력으로 예측 (강지윤 ver.)\n",
    "model1_4.predict(exog=pd.DataFrame({'age':[37]}))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 22,
     "status": "ok",
     "timestamp": 1668725565531,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "zGSmLaTGPIFV",
    "outputId": "f5341a96-ad71-4dd4-f492-33757d139c27",
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "127    5279.136947\n",
       "187    6085.940191\n",
       "24     6201.197798\n",
       "206    4933.364127\n",
       "235    6546.970617\n",
       "dtype: float64"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# predict 전체값 예측\n",
    "model1_4.predict(exog=df_test1[['age']])[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 297
    },
    "executionInfo": {
     "elapsed": 22,
     "status": "ok",
     "timestamp": 1668725565532,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "456rLcLKPYVL",
    "outputId": "54acd037-d25e-453f-92a1-980521f04a4a"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='age', ylabel='salary'>"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 선형회귀 그래프\n",
    "sns.regplot(x='age', y='salary', data=df_test1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "z4IpIXV-edh3"
   },
   "source": [
    "## 1-5.  $\\pi$(파이) Quiz 단일회귀 train_test_split /  sklearn.linear_model\n",
    "\n",
    "\n",
    "<br>나이로 연봉을 예측할 수 있을까 ?  \n",
    "<br>독립변수: 나이(age)\n",
    "<br>종속변수: 연봉(salary)\n",
    "\n",
    "train, test data 분할하고 37세의 연봉을 예측하시오"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# train_test_split (train_size= 0.7, random_state=123)\n",
    "df_train1, df_test1 = train_test_split(df, train_size= 0.7, random_state=123)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 21,
     "status": "ok",
     "timestamp": 1668725565533,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "yUUqgIWT59ui",
    "outputId": "82854b4a-711b-4ed8-dfb1-d5e02f7f3700"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[5279.13694659],\n",
       "       [6085.94019144],\n",
       "       [6201.19779784],\n",
       "       [4933.36412737],\n",
       "       [6546.97061706]])"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# LinearRegression, fit, predict\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "model1_5 = LinearRegression().fit(X = df_train1[['age']], \n",
    "                                  y = df_train1[['salary']])\n",
    "model1_5\n",
    "model1_5.predict( X = pd.DataFrame(data = [37], columns = ['age']))\n",
    "predict1_5 = model1_5.predict( X = df_test1[['age']])\n",
    "\n",
    "predict1_5[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 17:10분에 시작하겠습니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1-6. 단일회귀 train_test_split /  statsmodels.api "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<statsmodels.regression.linear_model.RegressionResultsWrapper at 0x2a2ff63aac0>"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# statsmodels.api\n",
    "import statsmodels.api as sm\n",
    "from statsmodels.formula.api import ols\n",
    "\n",
    "# train, fit\n",
    "model_sm = sm.OLS(endog = df_train1['salary'], exog=sm.add_constant(df_train1[['age']])).fit() # intercept 포함\n",
    "# model_sm = sm.OLS(endog = df_train1['salary'], exog=df_train1[['age']]).fit()  # intercept 미포함\n",
    "\n",
    "model_sm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "127    5279.136947\n",
       "187    6085.940191\n",
       "24     6201.197798\n",
       "206    4933.364127\n",
       "235    6546.970617\n",
       "dtype: float64"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# predict\n",
    "model_sm.predict(sm.add_constant(df_test1[['age']]))[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>         <td>salary</td>      <th>  R-squared:         </th> <td>   0.281</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.276</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   67.46</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 06 Mar 2023</td> <th>  Prob (F-statistic):</th> <td>4.83e-14</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>17:21:12</td>     <th>  Log-Likelihood:    </th> <td> -1543.0</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   175</td>      <th>  AIC:               </th> <td>   3090.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   173</td>      <th>  BIC:               </th> <td>   3096.</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     1</td>      <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "    <td></td>       <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th> <td> 1821.4088</td> <td>  564.336</td> <td>    3.228</td> <td> 0.001</td> <td>  707.539</td> <td> 2935.278</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>age</th>   <td>  115.2576</td> <td>   14.033</td> <td>    8.213</td> <td> 0.000</td> <td>   87.559</td> <td>  142.956</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td>56.938</td> <th>  Durbin-Watson:     </th> <td>   2.149</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.000</td> <th>  Jarque-Bera (JB):  </th> <td> 109.516</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td> 1.578</td> <th>  Prob(JB):          </th> <td>1.66e-24</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 5.249</td> <th>  Cond. No.          </th> <td>    183.</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:                 salary   R-squared:                       0.281\n",
       "Model:                            OLS   Adj. R-squared:                  0.276\n",
       "Method:                 Least Squares   F-statistic:                     67.46\n",
       "Date:                Mon, 06 Mar 2023   Prob (F-statistic):           4.83e-14\n",
       "Time:                        17:21:12   Log-Likelihood:                -1543.0\n",
       "No. Observations:                 175   AIC:                             3090.\n",
       "Df Residuals:                     173   BIC:                             3096.\n",
       "Df Model:                           1                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "const       1821.4088    564.336      3.228      0.001     707.539    2935.278\n",
       "age          115.2576     14.033      8.213      0.000      87.559     142.956\n",
       "==============================================================================\n",
       "Omnibus:                       56.938   Durbin-Watson:                   2.149\n",
       "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              109.516\n",
       "Skew:                           1.578   Prob(JB):                     1.66e-24\n",
       "Kurtosis:                       5.249   Cond. No.                         183.\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "\"\"\""
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# summary()\n",
    "model_sm.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "vhWiJegbvSiL"
   },
   "source": [
    "## 2-1. 다중회귀 statemodels -ols()\n",
    "\n",
    "연봉과 나이로 지출액을 예측할 수 있을까\n",
    "<br> train, test data 분할\n",
    "<br> 종속변수 : 지출액 (expenditure)\n",
    "<br> 독립변수 : 연봉과 나이 (age , salary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {
    "executionInfo": {
     "elapsed": 19,
     "status": "ok",
     "timestamp": 1668725565533,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "vup2bppnw1t4"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<statsmodels.regression.linear_model.RegressionResultsWrapper at 0x2a2f80e1ac0>"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ols 다중회귀 모델링, fit\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "formula='expenditure ~ age + salary'\n",
    "model2_1 = ols(formula='expenditure ~ age + salary', data= df_train1).fit()\n",
    "model2_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 499
    },
    "executionInfo": {
     "elapsed": 20,
     "status": "ok",
     "timestamp": 1668725565534,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "I2xntcepw8Vl",
    "outputId": "196963f5-f31f-4a71-cdfd-5bf4306e3ec0"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>OLS Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>expenditure</td>   <th>  R-squared:         </th> <td>   0.956</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                   <td>OLS</td>       <th>  Adj. R-squared:    </th> <td>   0.955</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>             <td>Least Squares</td>  <th>  F-statistic:       </th> <td>   1853.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>             <td>Mon, 06 Mar 2023</td> <th>  Prob (F-statistic):</th> <td>4.36e-117</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                 <td>17:23:38</td>     <th>  Log-Likelihood:    </th> <td> -1299.9</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Observations:</th>      <td>   175</td>      <th>  AIC:               </th> <td>   2606.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Residuals:</th>          <td>   172</td>      <th>  BIC:               </th> <td>   2615.</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Df Model:</th>              <td>     2</td>      <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>      <td>nonrobust</td>    <th>                     </th>     <td> </td>    \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "      <td></td>         <th>coef</th>     <th>std err</th>      <th>t</th>      <th>P>|t|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Intercept</th> <td>-1633.1811</td> <td>  145.299</td> <td>  -11.240</td> <td> 0.000</td> <td>-1919.980</td> <td>-1346.382</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>age</th>       <td>   14.9256</td> <td>    4.137</td> <td>    3.608</td> <td> 0.000</td> <td>    6.760</td> <td>   23.091</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>salary</th>    <td>    0.9436</td> <td>    0.019</td> <td>   49.632</td> <td> 0.000</td> <td>    0.906</td> <td>    0.981</td>\n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "  <th>Omnibus:</th>       <td> 1.753</td> <th>  Durbin-Watson:     </th> <td>   1.943</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Prob(Omnibus):</th> <td> 0.416</td> <th>  Jarque-Bera (JB):  </th> <td>   1.495</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Skew:</th>          <td>-0.073</td> <th>  Prob(JB):          </th> <td>   0.474</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Kurtosis:</th>      <td> 2.571</td> <th>  Cond. No.          </th> <td>3.10e+04</td>\n",
       "</tr>\n",
       "</table><br/><br/>Notes:<br/>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br/>[2] The condition number is large, 3.1e+04. This might indicate that there are<br/>strong multicollinearity or other numerical problems."
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                            OLS Regression Results                            \n",
       "==============================================================================\n",
       "Dep. Variable:            expenditure   R-squared:                       0.956\n",
       "Model:                            OLS   Adj. R-squared:                  0.955\n",
       "Method:                 Least Squares   F-statistic:                     1853.\n",
       "Date:                Mon, 06 Mar 2023   Prob (F-statistic):          4.36e-117\n",
       "Time:                        17:23:38   Log-Likelihood:                -1299.9\n",
       "No. Observations:                 175   AIC:                             2606.\n",
       "Df Residuals:                     172   BIC:                             2615.\n",
       "Df Model:                           2                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "==============================================================================\n",
       "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------\n",
       "Intercept  -1633.1811    145.299    -11.240      0.000   -1919.980   -1346.382\n",
       "age           14.9256      4.137      3.608      0.000       6.760      23.091\n",
       "salary         0.9436      0.019     49.632      0.000       0.906       0.981\n",
       "==============================================================================\n",
       "Omnibus:                        1.753   Durbin-Watson:                   1.943\n",
       "Prob(Omnibus):                  0.416   Jarque-Bera (JB):                1.495\n",
       "Skew:                          -0.073   Prob(JB):                        0.474\n",
       "Kurtosis:                       2.571   Cond. No.                     3.10e+04\n",
       "==============================================================================\n",
       "\n",
       "Notes:\n",
       "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
       "[2] The condition number is large, 3.1e+04. This might indicate that there are\n",
       "strong multicollinearity or other numerical problems.\n",
       "\"\"\""
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# summary\n",
    "model2_1.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Intercept   -1633.181087\n",
       "age            14.925566\n",
       "salary          0.943551\n",
       "dtype: float64"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# attribute 확인\n",
    "model2_1.params"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## $$y= 14.9256 \\times x_1  + 0.9436 \\times x_2 - 1633.1811$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>jumin7</th>\n",
       "      <th>gender</th>\n",
       "      <th>height</th>\n",
       "      <th>age</th>\n",
       "      <th>blood_type</th>\n",
       "      <th>company</th>\n",
       "      <th>grades</th>\n",
       "      <th>salary</th>\n",
       "      <th>expenditure</th>\n",
       "      <th>expenditure_per_salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>127</th>\n",
       "      <td>hkd213</td>\n",
       "      <td>910216-2</td>\n",
       "      <td>F</td>\n",
       "      <td>158.3</td>\n",
       "      <td>30</td>\n",
       "      <td>B</td>\n",
       "      <td>C</td>\n",
       "      <td>C</td>\n",
       "      <td>7520</td>\n",
       "      <td>6770</td>\n",
       "      <td>0.900266</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       name    jumin7 gender  height  age blood_type company grades  salary  \\\n",
       "127  hkd213  910216-2      F   158.3   30          B       C      C    7520   \n",
       "\n",
       "     expenditure  expenditure_per_salary  \n",
       "127         6770                0.900266  "
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test1.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 18,
     "status": "ok",
     "timestamp": 1668725565534,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "P59qiehpxkgn",
    "outputId": "30ab898b-05e3-483a-ad68-0ffb9b4c020c"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5910.4589000000005"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 회귀식, hkd213에 대입 나이 30 / 연봉 7520\n",
    "14.9256 * 30 + 0.9436 * 7520 - 1633.1811"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 18,
     "status": "ok",
     "timestamp": 1668725565535,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "tbfxGRrqyUZ9",
    "outputId": "d9dd245e-2e55-4f08-c2bf-c15b3753baf1",
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "127    5910.092828\n",
       "187    4221.824034\n",
       "dtype: float64"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# predict 예측\n",
    "predict2_1 = model2_1.predict(exog=df_test1[['age', 'salary']])\n",
    "predict2_1[:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(Intercept   -1633.181087\n",
       " age            14.925566\n",
       " salary          0.943551\n",
       " dtype: float64,\n",
       " -1633.1810866712656,\n",
       " 14.925566456303118,\n",
       " 0.9435514522157415)"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# attribute로 확인\n",
    "model2_1.params, model2_1.params[0], model2_1.params[1], model2_1.params[2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5910.092827680204"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 회귀식에 attribute값 대입, (나이 30 / 연봉 7520)\n",
    "model2_1.params[1] * 30 + model2_1.params[2] * 7520 + model2_1.params[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "rttRLvNIl51S"
   },
   "source": [
    "## 다중회귀 2-2 sklearn.linear_model \n",
    "\n",
    "<br> 연봉과 지출액으로 나이를 예측할 수 있을까\n",
    "<br> train, test data 분할\n",
    "<br> 독립변수: salary, expenditure\n",
    "<br> 종속변수: age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 16,
     "status": "ok",
     "timestamp": 1668725568264,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "9ZCO7MCtfvpR",
    "outputId": "7b45671d-2488-485d-b6fa-27cad390fca1"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([45.29627698, 35.77791435, 37.64667625, 38.56708813, 34.08616908])"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# LinearRegression, fit, predict\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "model2_2 = LinearRegression().fit(X= df_train1[['salary', 'expenditure']],\n",
    "                       y= df_train1['age'])\n",
    "model2_2\n",
    "predict2_2 = model2_2.predict(X= df_test1[['salary', 'expenditure']])\n",
    "predict2_2[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([-0.00218482,  0.00471363]),\n",
       " 29.814852038392157,\n",
       " array(['salary', 'expenditure'], dtype=object))"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# intercept_, coef_확인\n",
    "model2_2.coef_, model2_2.intercept_, model2_2.feature_names_in_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>coef</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>salary</td>\n",
       "      <td>-0.002185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>expenditure</td>\n",
       "      <td>0.004714</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       feature      coef\n",
       "0       salary -0.002185\n",
       "1  expenditure  0.004714"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 변수별 회귀계수 확인하는 데이터프레임\n",
    "pd.DataFrame({'feature': model2_2.feature_names_in_, 'coef':model2_2.coef_ })"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "X7ZNaAeiw8e1"
   },
   "source": [
    "## 2-3 선형회귀 모형 명목형 변수의 처리\n",
    "get_dummy ('gender', 'blood_type', 'company', 'grades')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>jumin7</th>\n",
       "      <th>gender</th>\n",
       "      <th>height</th>\n",
       "      <th>age</th>\n",
       "      <th>blood_type</th>\n",
       "      <th>company</th>\n",
       "      <th>grades</th>\n",
       "      <th>salary</th>\n",
       "      <th>expenditure</th>\n",
       "      <th>expenditure_per_salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>hkd1</td>\n",
       "      <td>990623-2</td>\n",
       "      <td>F</td>\n",
       "      <td>161.9</td>\n",
       "      <td>22</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>4100</td>\n",
       "      <td>1975</td>\n",
       "      <td>0.481707</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>hkd10</td>\n",
       "      <td>900303-2</td>\n",
       "      <td>F</td>\n",
       "      <td>169.4</td>\n",
       "      <td>31</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>B</td>\n",
       "      <td>4720</td>\n",
       "      <td>2970</td>\n",
       "      <td>0.629237</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>hkd100</td>\n",
       "      <td>681205-2</td>\n",
       "      <td>F</td>\n",
       "      <td>168.3</td>\n",
       "      <td>55</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>B</td>\n",
       "      <td>7280</td>\n",
       "      <td>5905</td>\n",
       "      <td>0.811126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>hkd101</td>\n",
       "      <td>931226-2</td>\n",
       "      <td>F</td>\n",
       "      <td>155.3</td>\n",
       "      <td>28</td>\n",
       "      <td>AB</td>\n",
       "      <td>B</td>\n",
       "      <td>B</td>\n",
       "      <td>4060</td>\n",
       "      <td>2935</td>\n",
       "      <td>0.722906</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>hkd102</td>\n",
       "      <td>920123-1</td>\n",
       "      <td>M</td>\n",
       "      <td>188.6</td>\n",
       "      <td>29</td>\n",
       "      <td>O</td>\n",
       "      <td>B</td>\n",
       "      <td>F</td>\n",
       "      <td>4390</td>\n",
       "      <td>4015</td>\n",
       "      <td>0.914579</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     name    jumin7 gender  height  age blood_type company grades  salary  \\\n",
       "0    hkd1  990623-2      F   161.9   22          A       A      A    4100   \n",
       "1   hkd10  900303-2      F   169.4   31          A       A      B    4720   \n",
       "2  hkd100  681205-2      F   168.3   55          A       A      B    7280   \n",
       "3  hkd101  931226-2      F   155.3   28         AB       B      B    4060   \n",
       "4  hkd102  920123-1      M   188.6   29          O       B      F    4390   \n",
       "\n",
       "   expenditure  expenditure_per_salary  \n",
       "0         1975                0.481707  \n",
       "1         2970                0.629237  \n",
       "2         5905                0.811126  \n",
       "3         2935                0.722906  \n",
       "4         4015                0.914579  "
      ]
     },
     "execution_count": 160,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 해당 column만 get_dummies\n",
    "df[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "      <th>blood_type</th>\n",
       "      <th>company</th>\n",
       "      <th>grades</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>F</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>F</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>F</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>F</td>\n",
       "      <td>AB</td>\n",
       "      <td>B</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>M</td>\n",
       "      <td>O</td>\n",
       "      <td>B</td>\n",
       "      <td>F</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  gender blood_type company grades\n",
       "0      F          A       A      A\n",
       "1      F          A       A      B\n",
       "2      F          A       A      B\n",
       "3      F         AB       B      B\n",
       "4      M          O       B      F"
      ]
     },
     "execution_count": 162,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['gender', 'blood_type', 'company', 'grades']][:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "      <th>company</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>F</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>F</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>F</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  gender company\n",
       "0      F       A\n",
       "1      F       A\n",
       "2      F       A"
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['gender', 'company']][:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender_F</th>\n",
       "      <th>gender_M</th>\n",
       "      <th>company_A</th>\n",
       "      <th>company_B</th>\n",
       "      <th>company_C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   gender_F  gender_M  company_A  company_B  company_C\n",
       "0         1         0          1          0          0\n",
       "1         1         0          1          0          0\n",
       "2         1         0          1          0          0\n",
       "3         1         0          0          1          0\n",
       "4         0         1          0          1          0"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.get_dummies(df[['gender', 'company']])[:5] # 사전 순서로 정렬[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 424
    },
    "executionInfo": {
     "elapsed": 27,
     "status": "ok",
     "timestamp": 1668725570534,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "ua39Eo6Mz_5U",
    "outputId": "47598736-f556-4b08-96f0-e23d9d6283e8",
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>jumin7</th>\n",
       "      <th>height</th>\n",
       "      <th>age</th>\n",
       "      <th>blood_type</th>\n",
       "      <th>grades</th>\n",
       "      <th>salary</th>\n",
       "      <th>expenditure</th>\n",
       "      <th>expenditure_per_salary</th>\n",
       "      <th>gender_M</th>\n",
       "      <th>company_B</th>\n",
       "      <th>company_C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>hkd1</td>\n",
       "      <td>990623-2</td>\n",
       "      <td>161.9</td>\n",
       "      <td>22</td>\n",
       "      <td>A</td>\n",
       "      <td>A</td>\n",
       "      <td>4100</td>\n",
       "      <td>1975</td>\n",
       "      <td>0.481707</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>hkd10</td>\n",
       "      <td>900303-2</td>\n",
       "      <td>169.4</td>\n",
       "      <td>31</td>\n",
       "      <td>A</td>\n",
       "      <td>B</td>\n",
       "      <td>4720</td>\n",
       "      <td>2970</td>\n",
       "      <td>0.629237</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>hkd100</td>\n",
       "      <td>681205-2</td>\n",
       "      <td>168.3</td>\n",
       "      <td>55</td>\n",
       "      <td>A</td>\n",
       "      <td>B</td>\n",
       "      <td>7280</td>\n",
       "      <td>5905</td>\n",
       "      <td>0.811126</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>hkd101</td>\n",
       "      <td>931226-2</td>\n",
       "      <td>155.3</td>\n",
       "      <td>28</td>\n",
       "      <td>AB</td>\n",
       "      <td>B</td>\n",
       "      <td>4060</td>\n",
       "      <td>2935</td>\n",
       "      <td>0.722906</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>hkd102</td>\n",
       "      <td>920123-1</td>\n",
       "      <td>188.6</td>\n",
       "      <td>29</td>\n",
       "      <td>O</td>\n",
       "      <td>F</td>\n",
       "      <td>4390</td>\n",
       "      <td>4015</td>\n",
       "      <td>0.914579</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     name    jumin7  height  age blood_type grades  salary  expenditure  \\\n",
       "0    hkd1  990623-2   161.9   22          A      A    4100         1975   \n",
       "1   hkd10  900303-2   169.4   31          A      B    4720         2970   \n",
       "2  hkd100  681205-2   168.3   55          A      B    7280         5905   \n",
       "3  hkd101  931226-2   155.3   28         AB      B    4060         2935   \n",
       "4  hkd102  920123-1   188.6   29          O      F    4390         4015   \n",
       "\n",
       "   expenditure_per_salary  gender_M  company_B  company_C  \n",
       "0                0.481707         0          0          0  \n",
       "1                0.629237         0          0          0  \n",
       "2                0.811126         0          0          0  \n",
       "3                0.722906         0          1          0  \n",
       "4                0.914579         1          1          0  "
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 기존 DataFrame에 get_dummies추가\n",
    "# 전체 column + 해당 column, 원본 column은 삭제됨\n",
    "pd.get_dummies(data=df, columns=['gender', 'company'], drop_first = True)[:5] # 사전 순서로 정렬[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3.6일 수업 여기까지"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "LrwKIIBM3AuA"
   },
   "source": [
    "## 2-4 다중회귀 sklearn.linear_model \n",
    "\n",
    "회사와(company, 범주형) 연봉(salary, 연속형)으로 지출액(expenditure)을 예측할 수 있을까 ?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 27,
     "status": "ok",
     "timestamp": 1668725570534,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "N57h1tMG3WpE",
    "outputId": "edfb9234-bc9e-4fdf-f390-b24a59e8e985"
   },
   "outputs": [],
   "source": [
    "# LinearRegression, fit, predict\n",
    "from sklearn.linear_model import LinearRegression\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# attribute 확인(coef, intercept)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# feature, coef DataFrame화\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## $$y= -30.55 \\times x_1  + 177.91 \\times x_2 -147.36 \\times x_3 + 1.01 \\times x_4 - 1503.1087$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "JpMOZEbbpdH6"
   },
   "source": [
    "## 3-1 선형회귀 모델의 평가\n",
    "\n",
    "MSE, RMSE, MAE, RMAE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 3,
     "status": "ok",
     "timestamp": 1668725822482,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "4878AZ8tjHdv",
    "outputId": "3fec5287-492c-4c7f-d207-c0676a2d2547"
   },
   "outputs": [],
   "source": [
    "# df_train1, df_test1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 297
    },
    "executionInfo": {
     "elapsed": 507,
     "status": "ok",
     "timestamp": 1668725826089,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "yJ18tV7WjLbg",
    "outputId": "10a0d895-0e7c-450a-8d5b-60bb1aa66515"
   },
   "outputs": [],
   "source": [
    "# 평가를 위한 시각화 (x='salary', y='expenditure')\n",
    "sns.regplot(x='salary', y='expenditure', data=df_train1) # 평가는 회귀식과 실제값이 잘 맞는가"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 297
    },
    "executionInfo": {
     "elapsed": 6,
     "status": "ok",
     "timestamp": 1668725828888,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "jfbIO5NzRw_A",
    "outputId": "bb845ea5-4017-4f2a-c883-6489e656d0b7"
   },
   "outputs": [],
   "source": [
    "# 평가를 위한 시각화 (x='age', y='expenditure')\n",
    "sns.regplot(x='age', y='expenditure', data=df_train1)  # 그래프로 보면 age가 불리해 보임"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "executionInfo": {
     "elapsed": 12,
     "status": "ok",
     "timestamp": 1668725830493,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "AFgQ86LYlAJJ"
   },
   "outputs": [],
   "source": [
    "# LinearRegression (salary, expenditure)\n",
    "from sklearn.linear_model import LinearRegression\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "executionInfo": {
     "elapsed": 4,
     "status": "ok",
     "timestamp": 1668725828888,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "AQmSKSkIRynv"
   },
   "outputs": [],
   "source": [
    "# LinearRegression (age, expenditure)\n",
    "from sklearn.linear_model import LinearRegression\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 283
    },
    "executionInfo": {
     "elapsed": 12,
     "status": "ok",
     "timestamp": 1668725830494,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "UN67ufHKnmPX",
    "outputId": "ebecd63b-eaf4-4d61-d80b-9650b85f0507"
   },
   "outputs": [],
   "source": [
    "# predict_salary 시각화\n",
    "sns.regplot(x=predict_salary, y=df_test1['expenditure'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 283
    },
    "executionInfo": {
     "elapsed": 10,
     "status": "ok",
     "timestamp": 1668725830494,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "v1jL180ilmdj",
    "outputId": "b1b1e32c-210b-46ca-9769-f0f7cfdbed62"
   },
   "outputs": [],
   "source": [
    "# predict_age 시각화\n",
    "sns.regplot(x=predict_age, y=df_test1['expenditure'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "executionInfo": {
     "elapsed": 8,
     "status": "ok",
     "timestamp": 1668725830495,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "-oR-V-N0oET7"
   },
   "outputs": [],
   "source": [
    "# LinearRegression 평가를 위한 class\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Mean Absolute Error(MAE) : $$\\frac{1}{N}\\sum_{i=1}^{n}|x_i-y_i|$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Mean Absolute Error(MAE) 계산식\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 3,
     "status": "ok",
     "timestamp": 1668725831222,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "3LKR1LRio2n6",
    "outputId": "d2147d54-7316-4801-8754-d2dc2170edf9"
   },
   "outputs": [],
   "source": [
    "# mean_absolute_error class 활용 (predict_salary)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 2,
     "status": "ok",
     "timestamp": 1668725834009,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "UpG5cy42pQoS",
    "outputId": "87620638-f69c-4091-df1c-7045ee2c9ca7"
   },
   "outputs": [],
   "source": [
    "# mean_absolute_error class 활용 (predict_age)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Mean Squared Error(MSE): $$\\frac{1}{N}\\sum_{i=1}^{n}(x_i-y_i)^2$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Mean Squared Error(MSE) 계산식\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 5,
     "status": "ok",
     "timestamp": 1668725836887,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "MZ1dGOxupB-J",
    "outputId": "558bd952-3816-4c02-aa6c-a4b8c78737dc"
   },
   "outputs": [],
   "source": [
    "# mean_squared_error  class 활용 (predict_salary)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 5,
     "status": "ok",
     "timestamp": 1668725836888,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "7flLkBbDpaYX",
    "outputId": "8d711e7f-3513-40d6-a8ed-829c126d446f"
   },
   "outputs": [],
   "source": [
    "# mean_squared_error  class 활용 (predict_age)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Root Mean Squared Error(RMSE):\n",
    "$$\\sqrt{\\frac{1}{N}\\sum_{i=1}^{n}(x_i-y_i)^2 }$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Root Mean Squared Error(RMSE) 계산식\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 2,
     "status": "ok",
     "timestamp": 1668725838067,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "aaedtJljVUon",
    "outputId": "530e2350-8443-45e0-f414-ff67de42c1ca"
   },
   "outputs": [],
   "source": [
    "# RMSE (mean_squared_error 활용) (predict_salary)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# RMSE (mean_squared_error 활용) (predict_age)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3-2 정규화, 표준화 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "표준화 : min-max 단위를 고르게 하기 위하여 모든 값을 0~1사이로 바꾸는 것 \n",
    "<br> sklearn.preprocessing / MinMaxScaler 활용"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$Y = \\frac{( X - X_{min} )}{( X_{max} - X_{min} )} $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# MinMaxScaler class\n",
    "from sklearn.preprocessing import MinMaxScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 대상변수 선택 (수치형) 'height', 'age', 'salary', 'expenditure'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# MinMaxScaler 모델링\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# MinMaxScaler fit, transform\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 시각화 \n",
    "\n",
    "fig, ax = plt.subplots( nrows= 1 , ncols=2, figsize=(14, 5))\n",
    "\n",
    "ax[0].set_title('original ')\n",
    "ax[1].set_title('minmax')\n",
    "\n",
    "df_n.plot.hist(ax= ax[0] )\n",
    "df_minmax.plot.hist(ax= ax[1] )\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 정규화"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "정규화: StandardScaler 모든 변수의 값을 평균이 0이고 분산이 1인 정규 분포로 변환\n",
    "<br> sklearn.preprocessing / MinMaxScaler 활용"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$Z = \\frac{ X - \\mu }{\\sigma} $$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# StandardScaler class\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# StandardScaler 모델링\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# StandardScaler fit, transform\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#시각화 \n",
    "fig, ax = plt.subplots( nrows= 1 , ncols=3, figsize=(14, 5))\n",
    "\n",
    "sns.histplot(x='salary', data=df, ax= ax[0])\n",
    "sns.histplot(x='salary', data=df_minmax, ax= ax[1], color='green')\n",
    "sns.histplot(x='salary', data=df_stan, ax= ax[2], color='orange')\n",
    "\n",
    "ax[0].set_title('df salary histplot')\n",
    "ax[1].set_title('df_minmax salary histplot')\n",
    "ax[2].set_title('df_stan salary histplot')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# StandardScaler class\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# StandardScaler 모델링\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# StandardScaler fit, transform\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 정규화, train, test분리시 적용\n",
    "\n",
    "- train으로 정규화 모델을 만들었을때\n",
    "- test도 train 정규화 모델을 사용해야 같은 scale로 scaling된다"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# train_test_split\n",
    "from sklearn.model_selection import train_test_split\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 연속형 변수 추출\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# train data StandardScaler fit까지로 StandardScaler를 만든다\n",
    "from sklearn.preprocessing import StandardScaler\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# train에 대해 transform을 실행하여 train data를 StandardScaling\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# test data는 traind의 StandardScaler를 적용해 transform\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# train data df화\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# test data df화\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# train data EDA\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#시각화 \n",
    "fig, ax = plt.subplots( nrows= 1 , ncols=2, figsize=(14, 5))\n",
    "\n",
    "ax[0].set_title('train ')\n",
    "ax[1].set_title('test')\n",
    "\n",
    "df_train_std.plot.hist(ax= ax[0] )\n",
    "df_test_std.plot.hist(ax= ax[1] )\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "EfdUKiR4x6-Q"
   },
   "source": [
    "## 4-1 Feature Engeering\n",
    "\n",
    "변수 선택\n",
    "\n",
    "- 종속변수(expenditure)\n",
    "\n",
    "- 독립변수 수치형 변수중 회귀계수가 높은 2개 선정 (feature selection) 하시오\n",
    "- 독립변수 수치형 변수중 t검정 통계량의 p-value가 0.05이하인것을 선정하시오\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 520
    },
    "executionInfo": {
     "elapsed": 705,
     "status": "ok",
     "timestamp": 1668729161665,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "FN6GLA0k-FqZ",
    "outputId": "11022141-c038-4cd1-c89d-64c22862444d"
   },
   "outputs": [],
   "source": [
    "# ols 방식\n",
    "#종속변수: 소비액 / 독립변수: 신장 / 나이 / 연봉 \n",
    "from statsmodels.formula.api import ols\n",
    "\n",
    "# LinearRegression 방식\n",
    "from sklearn.linear_model import LinearRegression\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4-2 Feature Engeering\n",
    "\n",
    "보스톤 집값 데이터 셋(출처: sklearn 라이브러리) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "데이터(sklearn_boston.csv) 사이즈 : 506 X 14\n",
    "<br> \n",
    "<br> <b>crim:</b> 자치시 별 1인당 범죄율\n",
    "<br> <b>zn:</b> 25,000 평방피트 초과하는 거주지역 비율\n",
    "<br> <b>indus:</b> 비소매상업지역 점유하고 있는 토지 비율 \n",
    "<br> <b>chas:</b> 찰스강에 대한 더미 변수(강 경계 1, 아니면 0) \n",
    "<br> <b>nox:</b> 10ppm 당 농축 일산화 질소\n",
    "<br> <b>rm:</b> 주택 1가구당 평균 방의 개수 \n",
    "<br> <b>age:</b> 1940년 이전 건축된 소유주택 비율\n",
    "<br> <b>dis:</b> 5개 보스턴 직업센터까지의 접근성 지수 \n",
    "<br> <b>rad:</b> 방사형 도로까지의 접근성 지수 \n",
    "<br> <b>tax:</b> 10,000 달러 당 재산세 율\n",
    "<br> <b>ptratio:</b> 자치시 별 학생 / 교사 비율 \n",
    "<br> <b>b:</b> 자치시별 흑인의 비율 \n",
    "<br> <b>lstat:</b> 모집단 하위계층 비율 \n",
    "<br> <b>price:</b> 본인 소유 주택 가격 \n",
    "\n",
    "<br> 1. 종속변수 : price\n",
    "<br> 2. 독립변수 : price를 제외한 모든 변수\n",
    "<br> 3. feature selection을 통해 p-value 값 0.05 미만 / coef 절대값 0.5이상인 변수를 선택하시오\n",
    "<br> ------------------------------------------------------------------------------------------\n",
    "<br> 4. train, test 분리하여 다음을 수행 (train_size=0.8, random_state=123)\n",
    "<br> 5. 선택된 독립변수를 사용하여 선형회귀식을 만들고 RMSE를 구하시오 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 파일 로드 \n",
    "boston = pd.read_csv('.\\\\data\\\\sklearn_boston.csv')\n",
    "boston"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "boston.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# step1) 변수 생성\n",
    "boston.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# join\n",
    "' + '.join(boston.columns)\n",
    "'A' + ' + '.join(boston.columns.drop('price'))\n",
    "'price ~ ' + ' + '.join(boston.columns.drop('price'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "'price ~ ' + ' + '.join(boston.columns.drop('price'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# step2) formula 생성\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# step3) feature selection을 통해 p-value 값 0.05 미만 / coef 절대값 0.5이상인 변수를 선택하시오\n",
    "# ols, fit, summary\n",
    "from statsmodels.formula.api import ols\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# p-value 값 0.05 미만 / coef 절대값 0.5이상인 변수를 선택\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# step4) train, test 분리(train_size=0.8, random_state=123)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# formula 생성\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# step5) 선택된 독립변수를 사용하여 선형회귀식 생성\n",
    "from statsmodels.formula.api import ols\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# summary\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# step5) RMSE\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4-3 Feature Engeering - 다중 공선성 VIF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "boston"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# 상관관계 분석\n",
    "boston.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# 상관관계 매트릭스 시각화 \n",
    "plt.figure( figsize=(10, 10))\n",
    "sns.heatmap(boston.corr(), annot=True , cbar=True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#다중 공선성 VIF 구하기 \n",
    "\n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "\n",
    "vif = pd.DataFrame()\n",
    "vif[\"VIF Factor\"] = [variance_inflation_factor(boston.values, i) for i in range(boston.shape[1])]\n",
    "vif[\"features\"] = boston.columns\n",
    "vif.sort_values('VIF Factor', ascending = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Ht5WvWhG6tun"
   },
   "source": [
    "##  $\\Sigma$ (시그마) Quiz"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "joz0fttoOWYJ"
   },
   "source": [
    "### quiz 1) 자전거공유플랫폼 데이터 셋 활용\n",
    "\n",
    "□ df_bike.csv 파일을 읽고 (데이터 객체명 : df_bike)\n",
    "train, test로 분리하시오 (random_state=123)\n",
    "\n",
    "  - sklearn.model_selection / train_test_split 메소드를 쓸 것(데이터셋은 df_bike_train, df_bike_test로 명명)\n",
    "\n",
    "  1_1. df_bike_train내 대여건수인 'riders' 변수와 'temp', 'feelslike', 'humidity', 'windspeed', 'casual'\n",
    "    <br> 간 pearson 상관계수를 확인, 'riders' 변수와 비교해 가장 상관계수 절대값이 큰 변수를 구하시오\n",
    "\n",
    "- df_bike_train으로 자건거 대여건수(riders)와 'temp'변수와 단일 회귀분석을 실시하고 \n",
    "\n",
    "  1_2. 회귀계수를 구하시오\n",
    "\n",
    "  1_3. df_bike_test의 대여건수를 예측(pred_count)하고, 예측치의 중앙값을 구하시오\n",
    "\n",
    "  1_4. df_bike_test의 대여건수 예측치(pred_count)와 실제값(riders)의 RMSE를 구하시오\n",
    "\n",
    "  1_5. df_bike_train의 자건거 대여건수(riders)를 종속변수로 하고, 'temp', 'feelslike', 'humidity', 'windspeed', 'casual'\n",
    "  \n",
    "    5개 독립변수로 다중 회귀분석을 하고자 한다.\n",
    "    \n",
    "    \n",
    "    이때 해당 모델의 결정계수를 구하고 통계적으로 유의미한 변수와 해당변수의 회귀값을 구하시오  \n",
    "\n",
    "** bike dataset 설명\n",
    "https://www.scikit-yb.org/en/latest/api/datasets/bikeshare.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 599,
     "status": "ok",
     "timestamp": 1668729272247,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "a1oRghwKFPT-",
    "outputId": "b7fdb46a-0ca9-4ca3-9897-037ce6a6a573"
   },
   "outputs": [],
   "source": [
    "# 파일 로딩 \n",
    "df_bike = pd.read_csv('.\\\\data\\\\yellowbrick_bikeshare.csv')\n",
    "\n",
    "# # 데이터 분리 \n",
    "from sklearn.model_selection import train_test_split\n",
    "df_bike_train, df_bike_test = train_test_split(df_bike, train_size= 0.7, random_state=123)\n",
    "print('df', len(df_bike), 'df_bike_train', len(df_bike_train), 'df_bike_test', len(df_bike_test))\n",
    "\n",
    "df_bike_train[['riders', 'temp', 'feelslike', 'humidity', 'windspeed', 'casual']].corr().abs().sort_values('riders', ascending=False)\n",
    "# casual, 0.695529"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "executionInfo": {
     "elapsed": 10,
     "status": "ok",
     "timestamp": 1668729277458,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "BcC2XRybw3Uu"
   },
   "outputs": [],
   "source": [
    "# 관련 메소드 호출\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from statsmodels.formula.api import ols\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 444
    },
    "executionInfo": {
     "elapsed": 6,
     "status": "ok",
     "timestamp": 1668729277819,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "lUb_H68Q37Z4",
    "outputId": "24b574d1-a329-4a38-d9bb-b80dd7926bdd"
   },
   "outputs": [],
   "source": [
    "# 1_2. 모델 Training, 회귀계수 (statemodels)\n",
    "\n",
    "# # OLS 모델, 1_2. 모델 Training, 회귀계수 (statemodels)\n",
    "\n",
    "# 1_2. 모델 Training, 회귀계수 (sklearn)    \n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "# 1_3. df_bike_test 예측치의 중앙값을 구하시오\n",
    "\n",
    "# 1_4. df_bike_test pred_count와 count의 RMSE\n",
    "\n",
    "# 1_5. feature selection\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "JLD7UQChjoSN"
   },
   "source": [
    "## quiz 2) 다이아몬드 데이터 셋 활용\n",
    "\n",
    "- diamond.csv 파일을 읽고 (df_dia)\n",
    "train, test로 분리하시오 (random_state=123) (df_dia_train, df_dia_test)\n",
    "\n",
    "- df_dia_train으로 선형회귀분석을 실시하고 아래에 답하시오\n",
    "\n",
    "  2_1. 종속변수(price), 독립변수(carat, depth)일때 독립변수의 회귀계수를 구하시오\n",
    "\n",
    "  2_2. 종속변수(price), 독립변수(carat, depth, color)일때 df_dia_test price의 예측값 평균을 구하시오\n",
    "\n",
    "    'color'는 더미변수로 변형하고 가변수를 생성시 마지막 변수 하나를 제거하시오 \n",
    "\n",
    "  2_3. 2_2 조건으로 df_dia_test의 값이 (carat: 1, color: 'E' , depth: 50)일때 price 예측값을 구하시오 \n",
    "\n",
    "** dia dataset 설명 https://www.kaggle.com/datasets/shivam2503/diamonds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "executionInfo": {
     "elapsed": 303,
     "status": "ok",
     "timestamp": 1668729282566,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "7IYxKTIciMwb",
    "outputId": "db28c295-7382-4d47-955f-24024b62422d"
   },
   "outputs": [],
   "source": [
    "# 파일 로딩 \n",
    "df_dia = pd.read_csv('.\\\\data\\\\diamonds.csv')\n",
    "\n",
    "# 데이터 분리 \n",
    "from sklearn.model_selection import train_test_split\n",
    "df_dia_train, df_dia_test = train_test_split(df_dia, train_size= 0.7, random_state=123)\n",
    "print('df', len(df_dia), 'df_dia_train', len(df_dia_train), 'df_dia_test', len(df_dia_test))\n",
    "df_dia.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "executionInfo": {
     "elapsed": 3,
     "status": "ok",
     "timestamp": 1668729283663,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "CTCNxp3Ijfdw"
   },
   "outputs": [],
   "source": [
    "# 관련 메소드 호출\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from statsmodels.formula.api import ols\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 499
    },
    "executionInfo": {
     "elapsed": 6,
     "status": "ok",
     "timestamp": 1668729284342,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "LGdJ6mDnqvhZ",
    "outputId": "ee56fda8-18a9-4161-dfec-6f43a3cf967d"
   },
   "outputs": [],
   "source": [
    "# 2_1. 모델 Training, 회귀계수 (statemodels)\n",
    "\n",
    "# 2_1. 모델 Training, 회귀계수 (sklearn)    \n",
    "# X, y값 세팅\n",
    "\n",
    "# 2_2. 범주형 data 가변수화  \n",
    "\n",
    "# 데이터 분리 \n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# X, y값 세팅  ['carat', 'depth', 'color_D', 'color_E', 'color_F', 'color_G', 'color_H', 'color_I'] ['price']\n",
    "\n",
    "# LinearRegression, fit, predict\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "# 2_2. answer (mean)\n",
    "\n",
    "# 2_3. 독립변수 직접입력 방식\n",
    "# df_dia_test(carat: 1, depth: 50, color: 'E'  )일때 price 예측값\n",
    "\n",
    "# 2_3. answer \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "UMmbOFkyab_z"
   },
   "source": [
    "## $\\Omega$(오메가) Quiz\n",
    "\n",
    "- yellowbrick_bikeshare.csv 파일을 읽고 (객체명 : df_bike)\n",
    "\n",
    "  3-1 season column을 사용하여 여름(df_bike_summer)과 겨울(df_bike_winter)로 구분하시오\n",
    "\n",
    "  3_2 df_bike_summer, df_bike_winter를  train, test로 분리하시오 (df_summer_tr, df_summer_te, df_winter_tr, df_winter_te, random_state=123 )\n",
    "\n",
    "  3_3. statemodels를 사용하여 종속변수(riders), 독립변수(temp)로 train 시키고 여름과 겨울의 RMSE차이를 구하시오"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "executionInfo": {
     "elapsed": 3,
     "status": "ok",
     "timestamp": 1668729293917,
     "user": {
      "displayName": "jinyang park",
      "userId": "06576046992691541404"
     },
     "user_tz": -540
    },
    "id": "Vv5Bpo_ycZBs"
   },
   "outputs": [],
   "source": [
    "# 파일 로딩 \n",
    "df_bike = pd.read_csv('.\\\\data\\\\yellowbrick_bikeshare.csv')\n",
    "\n",
    "# 3-1 데이터 분리\n",
    "\n",
    "# 3-2 train, test 분리\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# 3-3 train, predict\n",
    "from statsmodels.formula.api import ols\n",
    "\n",
    "\n",
    "# 3-3 RMSE\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#시각화 \n",
    "fig, ax = plt.subplots( nrows= 1 , ncols=2, figsize=(14, 5))\n",
    "\n",
    "sns.regplot(x='temp', y='riders', data=df_summer_tr, ax= ax[0], color='green')\n",
    "sns.regplot(x='temp', y='riders', data=df_winter_tr, ax= ax[1])\n",
    "\n",
    "ax[0].set_title('df_summer_tr')\n",
    "ax[1].set_title('df_winter_tr')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "authorship_tag": "ABX9TyMDMucM2pMTNZILG4KX61Uv",
   "collapsed_sections": [
    "4JTxsWF-5sXG",
    "hfMi2HeL4piH",
    "5YwW9JcI1BcB",
    "0DC3DnJKED-q",
    "7OEylfG6Ou24",
    "z4IpIXV-edh3",
    "vhWiJegbvSiL",
    "rttRLvNIl51S",
    "X7ZNaAeiw8e1",
    "LrwKIIBM3AuA",
    "JpMOZEbbpdH6",
    "Ht5WvWhG6tun",
    "joz0fttoOWYJ"
   ],
   "provenance": [],
   "toc_visible": true
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
